当我们使用Auth中间件验证用户身份时，如果用户未通过身份验证，则重定向到登录界面。
否则则按照顺序往下执行
class UsersController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth', [            
            'except' => ['show', 'create', 'store']
        ]);
    }

我们提倡在控制器 Auth 中间件使用中，首选 except 方法，这样的话，当你新增一个控制器方法时，默认是安全的，此为最佳实践。

只有当前用户才能有权限编辑自己的用户资料
所以需要有用户规则授权
php artisan make:policy UserPolicy

添加 return $currentUser->id === $user->id

update 方法接收两个参数，第一个参数默认为当前登录用户实例，第二个参数则为要进行授权的用户实例。当两个 id 相同时，则代表两个用户是相同用户，用户通过授权，可以接着进行下一个操作。如果 id 不相同的话，将抛出 403 异常信息来拒绝访问。

使用授权策略需要注意以下两点：

我们并不需要检查 $currentUser 是不是 NULL。未登录用户，框架会自动为其 所有权限 返回 false；
调用时，默认情况下，我们 不需要 传递当前登录用户至该方法内，因为框架会自动加载当前登录用户（接着看下去，后面有例子）；
接下来我们还需要在 AuthServiceProvider 类中对授权策略进行设置。AuthServiceProvider 包含了一个 policies 属性，该属性用于将各种模型对应到管理它们的授权策略上。我们需要为用户模型 User 指定授权策略 UserPolicy。

protected $policies = [
        'App\Model' => 'App\Policies\ModelPolicy',
        \App\Models\User::class => \App\Policies\UserPolicy::class,
    ];

授权策略定义完成之后，我们便可以通过在用户控制器中使用 authorize 方法来验证用户授权策略。默认的 App\Http\Controllers\Controller 类包含了 Laravel 的 AuthorizesRequests trait。此 trait 提供了 authorize 方法，它可以被用于快速授权一个指定的行为，当无权限运行该行为时会抛出 HttpException。authorize 方法接收两个参数，第一个为授权策略的名称，第二个为进行授权验证的数据。    

因为这个是让用户自己编辑的时候所采取的防护方法，所以需要在edit update方法中添加该验证

public function edit(User $user)
{
    $this->authorize('update', $user);
    return view('users.edit', compact('user'));
}

采取用户验证模式后，跳转是提示代码错误的，所以我们要在SessionController里面设定他在发生错误的时候跳转到什么界面

在路由中加个intented前缀即可

加完后仍然没有正常进入，甚至进自己的都出错了。结果是我在UserPolicy中写错了。我们的$currentUser不存在
所以我们要改过来

class SessionController extends Controller
{
    public function __construct()
    {
        $this->middleware('guest',[
            'only' => ['create']
        ]);
    }

为什么要在SessionController加 only 在 UserController 里加 
$this->middleware('auth', [            
            'except' => ['show', 'create', 'store']
        ]);


会被跳转到 Laravel 默认指定的页面 /home ，因我们并没有此页面，所以会报错找不到页面。我们需要修改下中间件里的 redirect() 方法调用，并加上友好的消息提醒：

app/Http/Middleware/RedirectIfAuthenticated.php

        